name: E-commerce Backend CI/CD
on: [push]

jobs:
  build:
    if: contains(github.event.head_commit.message, '-build')
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'staging' && 'staging' || github.ref_name == 'production' && 'production' || 'development' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/dev-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: make install
    
    - name: Lint code
      run: make lint
    
    - name: Test code
      run: make test
    
    - name: Format code
      run: make format
    
    - name: Push changes
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add .
        git diff --quiet && git diff --staged --quiet || git commit -m "Auto-format code"
        git push origin ${GITHUB_REF#refs/heads/}

  build-and-push-image:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/production')
    environment: ${{ github.ref_name == 'staging' && 'staging' || github.ref_name == 'production' && 'production' || 'development' }}
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}/ecommerce-backend
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Push Docker image
      run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}